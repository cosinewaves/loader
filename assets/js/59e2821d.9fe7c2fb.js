"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[281],{8117:e=>{e.exports=JSON.parse('{"functions":[{"name":"print","desc":"Prints a formatted message to the output console if logging is enabled.","params":[{"name":"msg","desc":"the message to print","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"static","source":{"line":31,"path":"lib/internal.luau"}},{"name":"warn","desc":"Sends a formatted warning message to the output console if logging is enabled.","params":[{"name":"msg","desc":"the warning message to display","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"static","source":{"line":45,"path":"lib/internal.luau"}},{"name":"error","desc":"Raises a formatted error message and halts execution if logging is enabled.","params":[{"name":"msg","desc":"the error message to raise","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"static","source":{"line":59,"path":"lib/internal.luau"}},{"name":"getInstanceName","desc":"Returns a formatted name for the given instance, used primarily for logging and debugging.","params":[{"name":"instance","desc":"the instance whose name or full name will be returned","lua_type":"Instance"}],"returns":[{"desc":"the formatted name (either `Name` or `FullName` depending on config)","lua_type":"string"}],"function_type":"static","source":{"line":73,"path":"lib/internal.luau"}},{"name":"change_env_const","desc":"Dynamically updates one of the loader\u2019s runtime configuration constants.\\n\\nThis allows toggling logging, changing the log prefix, or switching between \\ninstance names and full names in debug output.","params":[{"name":"envConstant","desc":"one of \\"LOGGING_ENABLED\\", \\"LOGGING_PREFIX\\", or \\"USE_FULL_NAME\\"","lua_type":"envConstants"},{"name":"newValue","desc":"the new value to assign to the selected constant","lua_type":"any"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"static","source":{"line":88,"path":"lib/internal.luau"}},{"name":"waitFor","desc":"Waits for the specified module to finish its `start` lifecycle before continuing.\\n\\nReturns a promise that resolves when the target module has completed starting,\\nallowing dependent modules to sequence their initialization using methods like `:andThen()`.","params":[{"name":"name","desc":"the name of the module to wait for","lua_type":"string"}],"returns":[{"desc":"a resolving or rejecting promise based on module availability","lua_type":"any"}],"function_type":"static","source":{"line":108,"path":"lib/internal.luau"}},{"name":"safeRequire","desc":"Safely requires a module and executes its lifecycle methods (`init` and `start`).\\n\\nIf the module exports `init`, it is invoked immediately.\\nIf it exports `start`, a start promise is created and tracked.\\nAlso injects `waitFor` into the module so it can depend on others.","params":[{"name":"module","desc":"the module to require and initialize","lua_type":"ModuleScript"}],"returns":[{"desc":"a promise resolving to the required module","lua_type":"any"}],"function_type":"static","source":{"line":129,"path":"lib/internal.luau"}},{"name":"load_modules","desc":"Loads and initializes modules from a specified container, optionally including descendants,\\nand filters them using an optional predicate.\\n\\nEach module is safely required, its lifecycle methods invoked, and start promises tracked.\\nReturns a promise that resolves after all modules and their start routines complete.","params":[{"name":"container","desc":"the Roblox instance containing modules to load","lua_type":"Instance"},{"name":"useDescendants","desc":"whether to include all descendants (true) or only direct children (false)","lua_type":"boolean"},{"name":"predicate","desc":"optional filter function to select modules","lua_type":"predicate<Instance>?"}],"returns":[{"desc":"a promise resolving to true if all modules loaded successfully, false otherwise","lua_type":"any"}],"function_type":"static","source":{"line":162,"path":"lib/internal.luau"}}],"properties":[],"types":[],"name":"internal","desc":"The `internal` class contains core utility functions, configurations, and lifecycle mechanisms\\nused internally by the loader. These include logging tools, safe module requiring with lifecycle\\nmethod execution (`init`, `start`), environment setting overrides, module tracking, and dependency\\nwaiting.","source":{"line":21,"path":"lib/internal.luau"}}')}}]);