"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[456],{7321:e=>{e.exports=JSON.parse('{"functions":[{"name":"register","desc":"Adds a new lifecycle method name that modules can define and be invoked automatically.","params":[{"name":"name","desc":"the name of the lifecycle method (e.g., \\"shutdown\\")","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":34,"path":"lib/lifecycles.luau"}},{"name":"bindSignal","desc":"Binds a lifecycle method to a RBXScriptSignal. When the signal fires, the method will be invoked\\non all connected modules that define it.","params":[{"name":"lifecycleName","desc":"the lifecycle method to invoke (e.g., \\"shutdown\\")","lua_type":"string"},{"name":"signal","desc":"the RBXScriptSignal to connect","lua_type":"RBXScriptSignal"}],"returns":[],"function_type":"static","source":{"line":48,"path":"lib/lifecycles.luau"}},{"name":"connect","desc":"Connects and runs all registered lifecycle methods on the given module.\\nReturns a table of promises keyed by lifecycle name.","params":[{"name":"name","desc":"the name of the module (used as key)","lua_type":"string"},{"name":"module","desc":"the module to connect","lua_type":"types.lifecycleModule"},{"name":"waitForFn","desc":"optional waitFor function to inject","lua_type":"((name: string) -> any)?"}],"returns":[{"desc":"promises for each lifecycle stage","lua_type":"{ [string]: any }"}],"function_type":"static","source":{"line":85,"path":"lib/lifecycles.luau"}},{"name":"disconnect","desc":"Disconnects lifecycle promises and cleanup for a given module by name.","params":[{"name":"name","desc":"the module name to disconnect","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":124,"path":"lib/lifecycles.luau"}},{"name":"waitFor","desc":"Waits for a specific lifecycle stage (e.g., \\"start\\") of a named module.","params":[{"name":"name","desc":"the module name","lua_type":"string"},{"name":"lifecycle","desc":"the lifecycle stage to wait for (e.g., \\"start\\")","lua_type":"string"}],"returns":[{"desc":"the associated promise, or rejected promise if missing","lua_type":"any"}],"function_type":"static","source":{"line":140,"path":"lib/lifecycles.luau"}},{"name":"getRegistered","desc":"Returns all registered lifecycle names (in execution order).\\nUseful for debugging or adding logic externally.","params":[],"returns":[{"desc":"list of lifecycle method names","lua_type":"{ string }"}],"function_type":"static","source":{"line":161,"path":"lib/lifecycles.luau"}}],"properties":[],"types":[],"name":"lifecycles","desc":"Handles lifecycle method connections (`init`, `start`, etc.) for modules.\\nSupports adding custom lifecycle methods and disconnecting them cleanly.","source":{"line":12,"path":"lib/lifecycles.luau"}}')}}]);