{"searchDocs":[{"title":"loader","type":0,"sectionRef":"#","url":"/loader/api/loader","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"loader","url":"/loader/api/loader#functions","content":" ","version":null,"tagName":"h2"},{"title":"load_children​","type":1,"pageTitle":"loader","url":"/loader/api/loader#load_children","content":"&lt;/&gt; loader.load_children( container: Instance ,-- the container whose children modules to load predicate: predicate&lt;Instance &gt;?-- optional filter to select which modules to load ) → any-- a promise resolving when all modules and their starts complete Loads child modules of a given container, applying an optional filter predicate.  ","version":null,"tagName":"h3"},{"title":"load_descendants​","type":1,"pageTitle":"loader","url":"/loader/api/loader#load_descendants","content":"&lt;/&gt; loader.load_descendants( container: Instance ,-- the container whose descendant modules to load predicate: predicate&lt;Instance &gt;?-- optional filter to select which modules to load ) → any-- a promise resolving when all modules and their starts complete Loads descendant modules of a given container, applying an optional filter predicate. ","version":null,"tagName":"h3"},{"title":"lifecycles","type":0,"sectionRef":"#","url":"/loader/api/lifecycles","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"lifecycles","url":"/loader/api/lifecycles#functions","content":" ","version":null,"tagName":"h2"},{"title":"register​","type":1,"pageTitle":"lifecycles","url":"/loader/api/lifecycles#register","content":"&lt;/&gt; lifecycles.register( name: string-- the name of the lifecycle method (e.g., &quot;shutdown&quot;) ) → () Adds a new lifecycle method name that modules can define and be invoked automatically.  ","version":null,"tagName":"h3"},{"title":"bindSignal​","type":1,"pageTitle":"lifecycles","url":"/loader/api/lifecycles#bindSignal","content":"&lt;/&gt; lifecycles.bindSignal( lifecycleName: string,-- the lifecycle method to invoke (e.g., &quot;shutdown&quot;) signal: RBXScriptSignal -- the RBXScriptSignal to connect ) → () Binds a lifecycle method to a RBXScriptSignal. When the signal fires, the method will be invoked on all connected modules that define it.  ","version":null,"tagName":"h3"},{"title":"connect​","type":1,"pageTitle":"lifecycles","url":"/loader/api/lifecycles#connect","content":"&lt;/&gt; lifecycles.connect( name: string,-- the name of the module (used as key) module: types.lifecycleModule,-- the module to connect waitForFn: ((name: string) → any)?-- optional waitFor function to inject ) → {[string]: any}-- promises for each lifecycle stage Connects and runs all registered lifecycle methods on the given module. Returns a table of promises keyed by lifecycle name.  ","version":null,"tagName":"h3"},{"title":"disconnect​","type":1,"pageTitle":"lifecycles","url":"/loader/api/lifecycles#disconnect","content":"&lt;/&gt; lifecycles.disconnect( name: string-- the module name to disconnect ) → () Disconnects lifecycle promises and cleanup for a given module by name.  ","version":null,"tagName":"h3"},{"title":"waitFor​","type":1,"pageTitle":"lifecycles","url":"/loader/api/lifecycles#waitFor","content":"&lt;/&gt; lifecycles.waitFor( name: string,-- the module name lifecycle: string-- the lifecycle stage to wait for (e.g., &quot;start&quot;) ) → any-- the associated promise, or rejected promise if missing Waits for a specific lifecycle stage (e.g., &quot;start&quot;) of a named module.  ","version":null,"tagName":"h3"},{"title":"getRegistered​","type":1,"pageTitle":"lifecycles","url":"/loader/api/lifecycles#getRegistered","content":"&lt;/&gt; lifecycles.getRegistered() → {string}-- list of lifecycle method names Returns all registered lifecycle names (in execution order). Useful for debugging or adding logic externally. ","version":null,"tagName":"h3"},{"title":"internal","type":0,"sectionRef":"#","url":"/loader/api/internal","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"internal","url":"/loader/api/internal#functions","content":" ","version":null,"tagName":"h2"},{"title":"print​","type":1,"pageTitle":"internal","url":"/loader/api/internal#print","content":"&lt;/&gt; internal.print( msg: string-- the message to print ) → () Prints a formatted message to the output console if logging is enabled.  ","version":null,"tagName":"h3"},{"title":"warn​","type":1,"pageTitle":"internal","url":"/loader/api/internal#warn","content":"&lt;/&gt; internal.warn( msg: string-- the warning message to display ) → () Sends a formatted warning message to the output console if logging is enabled.  ","version":null,"tagName":"h3"},{"title":"error​","type":1,"pageTitle":"internal","url":"/loader/api/internal#error","content":"&lt;/&gt; internal.error( msg: string-- the error message to raise ) → () Raises a formatted error message and halts execution if logging is enabled.  ","version":null,"tagName":"h3"},{"title":"getInstanceName​","type":1,"pageTitle":"internal","url":"/loader/api/internal#getInstanceName","content":"&lt;/&gt; internal.getInstanceName( instance: Instance -- the instance whose name or full name will be returned ) → string-- the formatted name (either Name or FullName depending on config) Returns a formatted name for the given instance, used primarily for logging and debugging.  ","version":null,"tagName":"h3"},{"title":"change_env_const​","type":1,"pageTitle":"internal","url":"/loader/api/internal#change_env_const","content":"&lt;/&gt; internal.change_env_const( envConstant: envConstants,-- one of &quot;LOGGING_ENABLED&quot;, &quot;LOGGING_PREFIX&quot;, or &quot;USE_FULL_NAME&quot; newValue: any-- the new value to assign to the selected constant ) → () Dynamically updates one of the loader’s runtime configuration constants. This allows toggling logging, changing the log prefix, or switching between instance names and full names in debug output.  ","version":null,"tagName":"h3"},{"title":"waitFor​","type":1,"pageTitle":"internal","url":"/loader/api/internal#waitFor","content":"&lt;/&gt; internal.waitFor( name: string-- the name of the module to wait for ) → any-- a resolving or rejecting promise based on module availability Waits for the specified module to finish its start lifecycle before continuing. Returns a promise that resolves when the target module has completed starting, allowing dependent modules to sequence their initialization using methods like :andThen().  ","version":null,"tagName":"h3"},{"title":"safeRequire​","type":1,"pageTitle":"internal","url":"/loader/api/internal#safeRequire","content":"&lt;/&gt; internal.safeRequire( module: ModuleScript -- the module to require and initialize ) → any-- a promise resolving to the required module Safely requires a module and executes its lifecycle methods (init and start). If the module exports init, it is invoked immediately. If it exports start, a start promise is created and tracked. Also injects waitFor into the module so it can depend on others.  ","version":null,"tagName":"h3"},{"title":"load_modules​","type":1,"pageTitle":"internal","url":"/loader/api/internal#load_modules","content":"&lt;/&gt; internal.load_modules( container: Instance ,-- the Roblox instance containing modules to load useDescendants: boolean,-- whether to include all descendants (true) or only direct children (false) predicate: predicate&lt;Instance &gt;?-- optional filter function to select modules ) → any-- a promise resolving to true if all modules loaded successfully, false otherwise Loads and initializes modules from a specified container, optionally including descendants, and filters them using an optional predicate. Each module is safely required, its lifecycle methods invoked, and start promises tracked. Returns a promise that resolves after all modules and their start routines complete. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}